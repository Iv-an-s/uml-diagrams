@startuml
skinparam actor {
    BackgroundColor #95C8D8
    BorderColor Red
}
skinparam participant {
    BackgroundColor #F0F0F0
    BorderColor Green
}
skinparam database{
    BackgroundColor #Orange
    BorderColor Black
}
skinparam sequenceMessageAlign left

autonumber

actor Consumer as C
participant "Web UI" as UI
participant "Order Controller" as OC
participant "Payment Service" as PS
database "Database" as DB
participant "Notification Service" as NS

activate C
group "1.Оформление заказа"
    C -> UI: initiateOrder(orderDetails)
    activate UI
    UI -> OC: processOrder(orderDetails)
    activate OC
    OC -> DB: saveOrder(orderDetails)
    activate DB
    OC <-[#green]- DB: orderSaved
    note right of DB: Сохранен заказ в статусе\n"Ожидание оплаты"
    deactivate DB
end
group "2.Оплата"
    OC -> PS: processPayment(paymentInfo)
    activate PS
    alt "Успешная оплата"
        OC <-[#green]- PS: paymentSuccess(paymentConfirmation)
        OC -[#lightblue]-> NS: sendOrderNotification(orderId)
    else "Ошибка оплаты"
        OC <-[#red]- PS: paymentFailure(errorMessage)
        note right of OC: Заказ сохраняется как предварительный
        deactivate PS
    end
end
group "3.Подтверждение"
    UI <- OC: orderConfirmation(confirmationDetails)
    deactivate OC
    C <- UI: displayConfirmation((confirmationDetails)
end
...
group "4.Изменение корзины"
    C -> UI: modifyCart(action, itemDetails)
    note right of UI: Действие может быть: добавление, удаление, изменение количества
    UI -> OC: updateCart(action, itemDetails)
    activate OC
    OC -> DB: updateCartInDB(cartData)
    activate DB
    OC <-[#green]- DB: cartUpdateConfirmation
    deactivate DB
    UI <- OC: notifyCartUpdate(cartStatus)
    deactivate OC
end
...
group "5.Уведомление менеджера"
    UI <- NS: managerNotification(orderId, status)
    note left of UI: Менеджер получает уведомление о новом заказе
end
    deactivate UI
deactivate C
@enduml